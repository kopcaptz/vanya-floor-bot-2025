from typing import Dict
from datetime import datetime
from config import IVAN_CONTACT

class ReportGenerator:
    def __init__(self):
        self.ivan_contact = IVAN_CONTACT
    
    def create_analysis_report(self, analysis: Dict, cost_info: Dict, 
                              timeline: Dict, client_info: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ò–≤–∞–Ω–∞"""
        
        report = f"""üè† **–ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–ö–ò –ö–õ–ò–ï–ù–¢–ê**
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üë§ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:**
‚Ä¢ –ò–º—è: {client_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {client_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ê–¥—Ä–µ—Å: {client_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {client_info.get('message_count', 0)}

üìä **–ê–ù–ê–õ–ò–ó –ü–û–õ–ê:**
‚Ä¢ –¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è: {self._get_floor_type_description(analysis.get('floor_type', 'unknown'))}
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {self._get_condition_description(analysis.get('condition', 'unknown'))}
‚Ä¢ –ü–ª–æ—â–∞–¥—å: ~{analysis.get('total_area_estimate', 0)} –∫–≤.–º
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç: {self._get_complexity_description(analysis.get('work_complexity', 'medium'))}
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {analysis.get('images_analyzed', 0)}

‚ö†Ô∏è **–ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø:**
{self._format_damages(analysis.get('damages', []))}

üîß **–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ê–ë–û–¢–´:**
{self._format_recommendations(analysis.get('recommendations', []))}

üí∞ **–°–¢–û–ò–ú–û–°–¢–¨:**
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {cost_info['base_price_per_sqm']}‚Ç™/–∫–≤.–º
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_info['base_cost']}‚Ç™
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:
  - –°–æ—Å—Ç–æ—è–Ω–∏–µ: x{cost_info['condition_multiplier']}
  - –°–ª–æ–∂–Ω–æ—Å—Ç—å: x{cost_info['complexity_multiplier']}
  - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: x{cost_info['damage_multiplier']}
‚Ä¢ **–ò–¢–û–ì–û: {cost_info['min_cost']}-{cost_info['max_cost']}‚Ç™**
‚Ä¢ **–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –¶–ï–ù–ê: {cost_info['recommended_cost']}‚Ç™**

‚è±Ô∏è **–°–†–û–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø:**
‚Ä¢ –¢–∏–ø —Ä–∞–±–æ—Ç: {timeline['work_type']}
‚Ä¢ –í—Ä–µ–º—è: {timeline['min_days']}-{timeline['max_days']} –¥–Ω–µ–π
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫: {timeline['estimated_days']} –¥–Ω–µ–π

üìù **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
{self._format_additional_info(analysis, client_info)}

---
ü§ñ *–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –ò–ò-–±–æ—Ç–æ–º {self.ivan_contact['name']}–∞*
üìû *–ö–æ–Ω—Ç–∞–∫—Ç: {self.ivan_contact['phone']}*
"""
        return report
    
    def create_client_response_template(self, analysis: Dict, cost_info: Dict, 
                                      timeline: Dict, client_info: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        
        client_name = client_info.get('name', '–ö–ª–∏–µ–Ω—Ç')
        
        template = f"""–ü—Ä–∏–≤–µ—Ç {client_name}! üëã

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ç–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –í–æ—Ç —á—Ç–æ –≤–∏–∂—É:

üè† **–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è:** {self._get_floor_type_description(analysis.get('floor_type', 'unknown'))}
üìê **–ü–ª–æ—â–∞–¥—å:** –ø—Ä–∏–º–µ—Ä–Ω–æ {analysis.get('total_area_estimate', 0)} –∫–≤.–º
‚ö†Ô∏è **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {self._get_condition_description(analysis.get('condition', 'unknown'))}

{self._format_damages_for_client(analysis.get('damages', []))}

üîß **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
{self._format_recommendations_for_client(analysis.get('recommendations', []))}

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç:** {cost_info['recommended_cost']}‚Ç™
‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {timeline['estimated_days']} –¥–Ω–µ–π

–ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –ø—Ä–∏–µ—Ö–∞—Ç—å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞?

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{self.ivan_contact['name']} üî®
üìû {self.ivan_contact['phone']}
"""
        return template
    
    def create_quick_summary(self, analysis: Dict, cost_info: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        
        floor_type = self._get_floor_type_description(analysis.get('floor_type', 'unknown'))
        condition = analysis.get('condition', 'unknown')
        area = analysis.get('total_area_estimate', 0)
        price = cost_info['recommended_cost']
        
        summary = f"""üìã **–ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê**

üè† {floor_type} | üìê {area} –∫–≤.–º | ‚ö†Ô∏è {condition}
üí∞ {price}‚Ç™ | üîß {len(analysis.get('recommendations', []))} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
üì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analysis.get('images_analyzed', 0)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
        return summary
    
    def _get_floor_type_description(self, floor_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª–∞"""
        descriptions = {
            'parquet': '–ü–∞—Ä–∫–µ—Ç',
            'laminate': '–õ–∞–º–∏–Ω–∞—Ç',
            'tiles': '–ü–ª–∏—Ç–∫–∞',
            'linoleum': '–õ–∏–Ω–æ–ª–µ—É–º',
            'carpet': '–ö–æ–≤—Ä–æ–ª–∏–Ω',
            'concrete': '–ë–µ—Ç–æ–Ω',
            'unknown': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø'
        }
        return descriptions.get(floor_type, '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø')
    
    def _get_condition_description(self, condition: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        descriptions = {
            'excellent': '–û—Ç–ª–∏—á–Ω–æ–µ',
            'good': '–•–æ—Ä–æ—à–µ–µ',
            'fair': '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ',
            'poor': '–ü–ª–æ—Ö–æ–µ',
            'unknown': '–¢—Ä–µ–±—É–µ—Ç –æ—Å–º–æ—Ç—Ä–∞'
        }
        return descriptions.get(condition, '–¢—Ä–µ–±—É–µ—Ç –æ—Å–º–æ—Ç—Ä–∞')
    
    def _get_complexity_description(self, complexity: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç"""
        descriptions = {
            'low': '–ù–∏–∑–∫–∞—è (–ø—Ä–æ—Å—Ç–æ–π —Ä–µ–º–æ–Ω—Ç)',
            'medium': '–°—Ä–µ–¥–Ω—è—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)',
            'high': '–í—ã—Å–æ–∫–∞—è (—Å–ª–æ–∂–Ω—ã–π —Ä–µ–º–æ–Ω—Ç)'
        }
        return descriptions.get(complexity, '–°—Ä–µ–¥–Ω—è—è')
    
    def _format_damages(self, damages: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"""
        if not damages:
            return "‚Ä¢ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        formatted = []
        for damage in damages:
            severity_emoji = {
                'minor': 'üü°',
                'moderate': 'üü†', 
                'severe': 'üî¥'
            }
            emoji = severity_emoji.get(damage.get('severity', 'minor'), 'üü°')
            formatted.append(f"‚Ä¢ {emoji} {damage.get('description', '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ')}")
        
        return '\n'.join(formatted)
    
    def _format_damages_for_client(self, damages: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if not damages:
            return ""
        
        severe_damages = [d for d in damages if d.get('severity') == 'severe']
        if severe_damages:
            return f"\n‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:** {len(severe_damages)} —à—Ç.\n"
        
        return f"\n‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:** {len(damages)} —à—Ç.\n"
    
    def _format_recommendations(self, recommendations: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        if not recommendations:
            return "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä –Ω–∞ –º–µ—Å—Ç–µ"
        
        formatted = []
        for i, rec in enumerate(recommendations, 1):
            formatted.append(f"{i}. {rec}")
        
        return '\n'.join(formatted)
    
    def _format_recommendations_for_client(self, recommendations: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if not recommendations:
            return "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–º–æ—Ç—Ä –Ω–∞ –º–µ—Å—Ç–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        main_recs = recommendations[:3]
        formatted = []
        for rec in main_recs:
            formatted.append(f"‚Ä¢ {rec}")
        
        return '\n'.join(formatted)
    
    def _format_additional_info(self, analysis: Dict, client_info: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        info_parts = []
        
        # –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        if client_info.get('problem_descriptions'):
            info_parts.append("**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:**")
            for desc in client_info['problem_descriptions'][:3]:  # –ü–µ—Ä–≤—ã–µ 3
                info_parts.append(f"‚Ä¢ {desc}")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if analysis.get('context'):
            context_lines = analysis['context'].split('\n')[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫
            if context_lines:
                info_parts.append("\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**")
                for line in context_lines:
                    if line.strip():
                        info_parts.append(f"‚Ä¢ {line.strip()}")
        
        return '\n'.join(info_parts) if info_parts else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

