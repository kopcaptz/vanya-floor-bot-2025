import telebot
from telebot import types
import os
import tempfile
import logging
from typing import Dict

from whatsapp_parser import WhatsAppParser
from ai_analyzer import FloorAnalyzer
from pricing_calculator import PricingCalculator
from report_generator import ReportGenerator

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.whatsapp_parser = WhatsAppParser()
        self.floor_analyzer = FloorAnalyzer()
        self.pricing_calculator = PricingCalculator()
        self.report_generator = ReportGenerator()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_data = {}
        
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞"""
        
        @self.bot.message_handler(commands=['start'])
        def start_command(message):
            self.handle_start(message)
        
        @self.bot.message_handler(commands=['help'])
        def help_command(message):
            self.handle_help(message)
        
        @self.bot.message_handler(content_types=['document'])
        def handle_document(message):
            self.handle_zip_file(message)
        
        @self.bot.message_handler(content_types=['photo'])
        def handle_photo(message):
            self.handle_single_photo(message)
        
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callbacks(call):
            self.handle_callback_query(call)
    
    def handle_start(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        welcome_text = """üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ò–≤–∞–Ω–∞!**

–Ø –ø–æ–º–æ–≥–∞—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞.

üìã **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª–æ–≤
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤

üìÅ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º WhatsApp —á–∞—Ç–∞
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª–æ–≤
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ò–≤–∞–Ω–∞:**
–¢–µ–ª–µ—Ñ–æ–Ω: +972 52-477-2115
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –†–µ–º–æ–Ω—Ç –ø–æ–ª–æ–≤ –∏ –ø–∞—Ä–∫–µ—Ç–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞! üì∏"""

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data="help"),
            types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
        )
        
        self.bot.send_message(
            message.chat.id, 
            welcome_text, 
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    def handle_help(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
        help_text = """üîß **–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ**

üìÅ **–ê–Ω–∞–ª–∏–∑ WhatsApp —á–∞—Ç–∞:**
1. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ WhatsApp
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ‚Üí "–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞"
3. –í—ã–±–µ—Ä–∏—Ç–µ "–í–∫–ª—é—á–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç –±–æ—Ç

üì∏ **–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª–æ–≤ –ø–æ –æ–¥–Ω–æ–π
2. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üìä **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –¢–∏–ø –Ω–∞–ø–æ–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É
‚Ä¢ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
‚Ä¢ –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ZIP: 50MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚ùì **–í–æ–ø—Ä–æ—Å—ã?** –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ò–≤–∞–Ω—É: +972 52-477-2115"""

        self.bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
    
    def handle_zip_file(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ZIP —Ñ–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º WhatsApp"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ ZIP —Ñ–∞–π–ª
            if not message.document.file_name.endswith('.zip'):
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ZIP –∞—Ä—Ö–∏–≤—ã —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ WhatsApp"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if message.document.file_size > 50 * 1024 * 1024:  # 50MB
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB"
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            self.bot.send_chat_action(message.chat.id, 'typing')
            status_msg = self.bot.send_message(
                message.chat.id,
                "üì¶ –°–∫–∞—á–∏–≤–∞—é –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤..."
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = self.bot.get_file(message.document.file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.bot.edit_message_text(
                "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞...",
                message.chat.id,
                status_msg.message_id
            )
            
            # –ü–∞—Ä—Å–∏–º WhatsApp —ç–∫—Å–ø–æ—Ä—Ç
            parse_result = self.whatsapp_parser.process_whatsapp_export(downloaded_file)
            
            if not parse_result['success']:
                self.bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {parse_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    message.chat.id,
                    status_msg.message_id
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_files = [f for f in parse_result['media_files'] if f['type'] == 'image']
            
            if not image_files:
                self.bot.edit_message_text(
                    "‚ùå –í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                    message.chat.id,
                    status_msg.message_id
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.bot.edit_message_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...",
                message.chat.id,
                status_msg.message_id
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            analysis_result = self.floor_analyzer.analyze_multiple_images(
                image_files, 
                parse_result['conversation_context']
            )
            
            if not analysis_result['success']:
                self.bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    message.chat.id,
                    status_msg.message_id
                )
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            cost_info = self.pricing_calculator.calculate_project_cost(analysis_result)
            timeline = self.pricing_calculator.get_work_timeline(analysis_result, cost_info)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.delete_message(message.chat.id, status_msg.message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_data[message.chat.id] = {
                'analysis': analysis_result,
                'cost_info': cost_info,
                'timeline': timeline,
                'client_info': parse_result['client_info'],
                'parse_result': parse_result
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.send_analysis_results(message.chat.id)
            
        except Exception as e:
            logger.error(f"Error processing ZIP file: {e}")
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
            )
    
    def handle_single_photo(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"""
        try:
            self.bot.send_chat_action(message.chat.id, 'typing')
            status_msg = self.bot.send_message(
                message.chat.id,
                "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_info = self.bot.get_file(message.photo[-1].file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_file.write(downloaded_file)
                temp_file_path = temp_file.name
            
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                context = message.caption if message.caption else ""
                analysis = self.floor_analyzer.analyze_floor_image(temp_file_path, context)
                
                if not analysis['success']:
                    self.bot.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {analysis.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                        message.chat.id,
                        status_msg.message_id
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                single_analysis = {
                    'success': True,
                    'floor_type': analysis.get('floor_type', 'unknown'),
                    'condition': analysis.get('condition', 'unknown'),
                    'total_area_estimate': analysis.get('area_estimate', 20),
                    'damages': analysis.get('damages', []),
                    'recommendations': analysis.get('recommendations', []),
                    'work_complexity': analysis.get('work_complexity', 'medium'),
                    'images_analyzed': 1,
                    'context': context
                }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                cost_info = self.pricing_calculator.calculate_project_cost(single_analysis)
                timeline = self.pricing_calculator.get_work_timeline(single_analysis, cost_info)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.delete_message(message.chat.id, status_msg.message_id)
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
                quick_summary = self.report_generator.create_quick_summary(single_analysis, cost_info)
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="detailed_single"),
                    types.InlineKeyboardButton("üì± –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É", callback_data="client_template_single")
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.user_data[message.chat.id] = {
                    'analysis': single_analysis,
                    'cost_info': cost_info,
                    'timeline': timeline,
                    'client_info': {'name': '–ö–ª–∏–µ–Ω—Ç'},
                    'is_single_photo': True
                }
                
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n{quick_summary}",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file_path)
                
        except Exception as e:
            logger.error(f"Error processing single photo: {e}")
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}"
            )
    
    def send_analysis_results(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        user_data = self.user_data.get(chat_id)
        if not user_data:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        quick_summary = self.report_generator.create_quick_summary(
            user_data['analysis'], 
            user_data['cost_info']
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report"),
            types.InlineKeyboardButton("üì± –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É", callback_data="client_template"),
            types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="adjust_price"),
            types.InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞", callback_data="analysis_details"),
            types.InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")
        )
        
        self.bot.send_message(
            chat_id,
            f"‚úÖ **–ê–Ω–∞–ª–∏–∑ WhatsApp —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n{quick_summary}",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    def handle_callback_query(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            user_data = self.user_data.get(call.message.chat.id)
            
            if call.data == "help":
                self.handle_help(call.message)
            
            elif call.data == "contacts":
                contact_text = """üìû **–ö–û–ù–¢–ê–ö–¢–´ –ò–í–ê–ù–ê**

üë§ –ò–º—è: –ò–≤–∞–Ω
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +972 52-477-2115
üè† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –†–µ–º–æ–Ω—Ç –ø–æ–ª–æ–≤ –∏ –ø–∞—Ä–∫–µ—Ç–∞

üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –ß–µ—Ç–≤–µ—Ä–≥, 8:00 - 18:00
üìç –û–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–π–æ–Ω—ã: –í–µ—Å—å –ò–∑—Ä–∞–∏–ª—å

üí¨ –î–ª—è –∑–∞–∫–∞–∑–∞ —Ä–∞–±–æ—Ç –∑–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ WhatsApp!"""
                
                self.bot.send_message(call.message.chat.id, contact_text, parse_mode='Markdown')
            
            elif call.data in ["full_report", "detailed_single"] and user_data:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
                full_report = self.report_generator.create_analysis_report(
                    user_data['analysis'],
                    user_data['cost_info'],
                    user_data['timeline'],
                    user_data['client_info']
                )
                
                self.bot.send_message(call.message.chat.id, full_report, parse_mode='Markdown')
            
            elif call.data in ["client_template", "client_template_single"] and user_data:
                # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
                client_template = self.report_generator.create_client_response_template(
                    user_data['analysis'],
                    user_data['cost_info'],
                    user_data['timeline'],
                    user_data['client_info']
                )
                
                self.bot.send_message(
                    call.message.chat.id, 
                    f"üì± **–®–ê–ë–õ–û–ù –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–£:**\n\n{client_template}",
                    parse_mode='Markdown'
                )
            
            elif call.data == "new_analysis":
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if call.message.chat.id in self.user_data:
                    del self.user_data[call.message.chat.id]
                
                self.bot.send_message(
                    call.message.chat.id,
                    "üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É! –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
                )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error handling callback query: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

